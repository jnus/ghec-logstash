# GitHub Enterprise Cloud (GHEC) Webhook Logstash Configuration
# Processes all GitHub.com webhook payloads as documented at:
# https://docs.github.com/en/webhooks/webhook-events-and-payloads

input {
  http {
    port => 8080
    codec => json
    additional_codecs => { "application/json" => "json" }
    
    tags => ["github_webhook"]
  }
}

filter {
  # Only process GitHub webhook events
  if "github_webhook" in [tags] {
    
    # Add timestamp and event metadata
    mutate {
      add_field => {
        "[@metadata][processed_at]" => "%{+yyyy-MM-dd'T'HH:mm:ss.SSSZ}" 
        "event_type" => "%{[headers][x-github-event]}"
        "delivery_id" => "%{[headers][x-github-delivery]}"
      }
    }
    
    # Extract common repository information
    if [repository] {
      mutate {
        add_field => {
          "repo_name" => "%{[repository][name]}"
          "repo_full_name" => "%{[repository][full_name]}"
          "repo_id" => "%{[repository][id]}"
          "repo_owner" => "%{[repository][owner][login]}"
          "repo_private" => "%{[repository][private]}"
          "repo_default_branch" => "%{[repository][default_branch]}"
        }
      }
    }
    
    # Extract sender information
    if [sender] {
      mutate {
        add_field => {
          "sender_login" => "%{[sender][login]}"
          "sender_id" => "%{[sender][id]}"
          "sender_type" => "%{[sender][type]}"
        }
      }
    }
    
    # Extract organization information if present
    if [organization] {
      mutate {
        add_field => {
          "org_login" => "%{[organization][login]}"
          "org_id" => "%{[organization][id]}"
        }
      }
    }
    
    # Handle specific event types with additional parsing
    
    # Push events
    if [event_type] == "push" {
      mutate {
        add_field => {
          "ref" => "%{[ref]}"
          "before_sha" => "%{[before]}"
          "after_sha" => "%{[after]}"
          "created" => "%{[created]}"
          "deleted" => "%{[deleted]}"
          "forced" => "%{[forced]}"
          "compare_url" => "%{[compare]}"
        }
      }
      
      # Count commits
      if [commits] {
        ruby {
          code => "event.set('commit_count', event.get('commits').length)"
        }
      }
    }
    
    # Pull Request events
    else if [event_type] == "pull_request" {
      mutate {
        add_field => {
          "action" => "%{[action]}"
          "pr_number" => "%{[pull_request][number]}"
          "pr_state" => "%{[pull_request][state]}"
          "pr_title" => "%{[pull_request][title]}"
          "pr_draft" => "%{[pull_request][draft]}"
          "pr_mergeable" => "%{[pull_request][mergeable]}"
          "pr_base_ref" => "%{[pull_request][base][ref]}"
          "pr_head_ref" => "%{[pull_request][head][ref]}"
        }
      }
    }
    
    # Issues events
    else if [event_type] == "issues" {
      mutate {
        add_field => {
          "action" => "%{[action]}"
          "issue_number" => "%{[issue][number]}"
          "issue_state" => "%{[issue][state]}"
          "issue_title" => "%{[issue][title]}"
        }
      }
    }
    
    # Release events
    else if [event_type] == "release" {
      mutate {
        add_field => {
          "action" => "%{[action]}"
          "release_tag" => "%{[release][tag_name]}"
          "release_name" => "%{[release][name]}"
          "release_draft" => "%{[release][draft]}"
          "release_prerelease" => "%{[release][prerelease]}"
        }
      }
    }
    
    # Repository events
    else if [event_type] == "repository" {
      mutate {
        add_field => {
          "action" => "%{[action]}"
        }
      }
    }
    
    # Star events
    else if [event_type] == "star" {
      mutate {
        add_field => {
          "action" => "%{[action]}"
          "starred_at" => "%{[starred_at]}"
        }
      }
    }
    
    # Fork events
    else if [event_type] == "fork" {
      mutate {
        add_field => {
          "forkee_name" => "%{[forkee][full_name]}"
          "forkee_id" => "%{[forkee][id]}"
        }
      }
    }
    
    # Watch events
    else if [event_type] == "watch" {
      mutate {
        add_field => {
          "action" => "%{[action]}"
        }
      }
    }
    
    # Create events (branch or tag creation)
    else if [event_type] == "create" {
      mutate {
        add_field => {
          "ref_type" => "%{[ref_type]}"
          "ref" => "%{[ref]}"
          "master_branch" => "%{[master_branch]}"
        }
      }
    }
    
    # Delete events (branch or tag deletion)
    else if [event_type] == "delete" {
      mutate {
        add_field => {
          "ref_type" => "%{[ref_type]}"
          "ref" => "%{[ref]}"
        }
      }
    }
    
    # Clean up headers that are no longer needed
    mutate {
      remove_field => ["headers"]
    }
    
    # Add final processing timestamp
    date {
      match => [ "[@metadata][processed_at]", "yyyy-MM-dd'T'HH:mm:ss.SSSZ" ]
      target => "@timestamp"
    }
  }
}

output {
  # Output to Elasticsearch (uncomment and configure as needed)
  # elasticsearch {
  #   hosts => ["localhost:9200"]
  #   index => "github-webhooks-%{+YYYY.MM.dd}"
  #   template_name => "github-webhooks"
  # }
  
  # Output to stdout for debugging (comment out in production)
  stdout {
    codec => rubydebug {
      metadata => true
    }
  }
  
  # Optional: Output to file for archival
  # file {
  #   path => "/var/log/logstash/github-webhooks.log"
  #   codec => json_lines
  # }
}